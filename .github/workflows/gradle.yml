name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Set up MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 4000
          container port: 4000
          mysql version: '8.0'
          mysql database: 'fittingpair-test'
          mysql root password: ${{ secrets.DB_PASSWORD }}
          mysql user: 'myuser'
          mysql password: ${{ secrets.DB_USER_PASSWORD }}




          
      - name: Build with Gradle Wrapper
        run: |
          cd FittingPair
          sudo chmod +x gradlew
          ./gradlew build

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'


      # Docker 이미지 Build
      - name: docker image build
        run: |
          cd FittingPair
          docker build -t ${{secrets.DOCKERHUB_USERNAME}}/spring-main .

      # DockerHub Login (push 하기 위해)
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}

      # Docker hub 로 push
      - name: Docker Hub push
        run: docker push ${{secrets.DOCKERHUB_USERNAME}}/spring-main
        

  # 푸시한 이미지를 네이버 클라우드에서 pull 받아서 실행
  deploy:
    # needs를 통해 build job이 수행 성공시에 작업되도록 설정
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-main

      - name: docker stop container
        run: |
          if [ $(sudo docker ps -a -q -f name=spring-main) ]; then
            sudo docker stop spring-main
          fi

      - name: docker run new container
        run: |
          sudo docker run --rm -it -d -p 10007:10007 --name spring-main ${{ secrets.DOCKERHUB_USERNAME }}/spring-main
          
      - name: delete old docker image
        run: sudo docker system prune -f

