name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Set up MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 4000
          container port: 4000
          mysql version: '8.0'
          mysql database: 'fittingpair_test'
          mysql root password: ${{ secrets.DB_PASSWORD }}
          mysql user: ${{ secrets.DB_USERNAME }}
          mysql password: ${{ secrets.DB_USER_PASSWORD }}

      - name: Create application.yml
        run: |
          mkdir -p FittingPair/src/main/resources
          cat <<EOL > FittingPair/src/main/resources/application.yml
          spring:
            datasource:
              url: jdbc:mysql://${{ secrets.MYSQL_IP}}/fittingpair_test
              username: root
              password: ${{ secrets.DB_USER_PASSWORD }}
              driver-class-name: com.mysql.cj.jdbc.Driver
            jpa:
              database: mysql
              database-platform: org.hibernate.dialect.MySQLDialect
              show-sql: true
              hibernate:
                ddl-auto: none
              properties:
                hibernate:
                  format_sql: true
              generate-ddl: true
          jwt:
            header: Authorization
            issuer: codingbear
            secret-key: ${{ secrets.JWT_KEY }}
          server:
            port: ${{ secrets.SERVER_PORT }}
          aws:
            s3:
              bucket: ${{ secrets.AWS_BUCKET }}
              stack:
                auto: false
              region:
                static: ap-northeast-2
              credentials:
                accessKey: ${{ secrets.AWS_ACCESSKEY }}
                secretKey: ${{ secrets.AWS_SECRETKEY }}
          EOL

      - name: Build with Gradle Wrapper
        run: |
          cd FittingPair
          mkdir build
          sudo chmod +x gradlew
          ./gradlew clean build --info
          ls -al
          sudo docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/spring-main .
          sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          sudo docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-main
          

  dependency-submission:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Placeholder step
        run: echo "This job is a placeholder"

  #push:
  #  needs: dependency-submission
  #  runs-on: ubuntu-latest

  #  steps:
  #    - name: Docker login  
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{ secrets.DOCKERHUB_USERNAME }}
  #        password: ${{ secrets.DOCKERHUB_PASSWORD }}

  #    - name: Docker push
  #      run: |
  #        sudo docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-main

  deploy:
    needs: dependency-submission
    runs-on: ubuntu-latest

    steps:
      - name: NCP login and docker image pull and run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          password: ${{ secrets.NCP_PASSWORD }}
          port: ${{ secrets.NCP_PORT }}
          script: |
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            
            if [ $(sudo docker ps -a -q -f name=spring-main) ]; then
              sudo docker stop spring-main
            fi
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-main
            sudo docker run --rm -it -d -p 10007:10007 --name spring-main ${{ secrets.DOCKERHUB_USERNAME }}/spring-main
            sudo docker system prune -f
